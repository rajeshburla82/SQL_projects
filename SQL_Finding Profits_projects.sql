--1. Number of states present in the LocationTable.
SELECT COUNT(DISTINCT State) AS 'No. of States' FROM dbo.Location_1;

--2. Products that are of regular type.
SELECT COUNT(*) AS 'No. of Regular Products' FROM dbo.Product_1 WHERE Type = 'Regular';

--3. Spending has been done on marketing of product ID 1.
SELECT SUM(Marketing) AS 'Marketing Spending' FROM dbo.fact WHERE ProductId = 1;

--4. Minimum sales of a product
SELECT MIN(sales) AS 'Minimum Sales' FROM dbo.fact;

--5. Max Cost of Good Sold (COGS).
SELECT MAX(COGS) AS 'Max COGS' FROM dbo.fact;

select * from Product_1

--6. Details of the product where product type is coffee.
SELECT * FROM dbo.Product_1 WHERE [Product_Type] = 'Coffee';

--7. Details where total expenses are greater than 40.
SELECT * FROM dbo.fact WHERE [Total_Expenses] > 40;

--8. Average sales in area code 719
SELECT AVG(Sales) AS 'Avg sales for Area 719' FROM dbo.fact WHERE [Area_Code] = '719';

--9. Total profit generated by Colorado state.
SELECT SUM(f.Profit) AS 'Total Profit for Colorado'FROM fact as f 
JOIN Location_1 as l ON f.[Area_Code] = l.[Area_Code] WHERE l.State = 'Colorado';


--10. Average inventory for each product ID.
SELECT p.ProductID, AVG(f.Inventory) AS 'Average Inventory' FROM fact as f 
JOIN Product_1 as p ON f.ProductID = p.ProductID GROUP BY p.ProductID;

--11. State in a sequential order in a Location Table

SELECT DISTINCT State
FROM Location_1 ORDER BY State;


--12. Average budget of the Product where the average budget margin should be greater than 100.
SELECT ProductId, ROUND(AVG([Budget_Margin]),2) AS 'Average Budget' FROM dbo.fact
GROUP BY ProductID HAVING AVG([Budget_Margin]) > 100;

--13. Total sales done on date 2010-01-01
SELECT SUM(Sales) AS 'Total Sales on 2010-01-01' FROM dbo.fact WHERE Date = '2010-01-01';

--14. Average total expense of each product ID on an individual date.
SELECT ProductID, Date, ROUND(AVG([Total_Expenses]),2) AS 'Average Total Expense'FROM dbo.fact
GROUP BY ProductID, Date;

--15. Table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.
SELECT f.Date, f.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, l.Area_Code FROM fact as f
JOIN dbo.Product_1 as p ON f.ProductID = p.ProductID
JOIN dbo.Location_1 as l ON f.Area_Code = l.Area_Code;

--16. Rank without any gap to show the sales wise rank.
SELECT Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS 'Sales Rank' FROM fact;

--17. State wise profit and sales.
SELECT l.State, SUM(f.Sales) AS 'Total Sales', 
SUM(f.Profit) AS 'Total Profit' FROM Location_1 as l
JOIN fact f ON l.[Area_Code] = f.[Area_Code] GROUP BY l.State;

--18. State wise profit and sales along with the product name.
SELECT l.State,p.Product,
    SUM(f.Profit) AS 'PROFIT',
    SUM(f.Sales) AS 'SALES' FROM Location_1 as l
JOIN fact f ON l.[Area_Code] = f.[Area_Code]
JOIN Product_1 as p ON f.ProductID = p.ProductID
GROUP BY l.State, p.Product;

--19. Increase in sales of 5%, calculate the increased sales.
SELECT Sales AS 'Original Sales',
  Sales * 1.05 AS 'Increased Sales' FROM dbo.fact;

--20. Maximum profit along with the product ID and product type.
SELECT p.ProductId, p.Product_Type, MAX(f.Profit) AS 'Max Profit' FROM fact as f
JOIN dbo.Product_1  p ON f.ProductId = p.ProductId
GROUP BY p.ProductId, p.Product_Type;

--21. Stored procedure to fetch the result according to the product type from Product Table.
CREATE PROCEDURE GetProductsByType
    @productType VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM Product_1 
    WHERE Product_Type = @productType;
END;

EXEC GetProductsByType 'Coffee';

--22. Condition- Total expenses is less than 60 then it is a profit or else loss.
SELECT *,
    CASE 
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS 'Status'
FROM dbo.fact;

--23. Total weekly sales value with the date and product ID details. Roll-up to pull the data in hierarchical order.

--24. Union and intersection operator on the tables which consist of attribute area code.
SELECT Area_Code FROM Location_1
UNION
SELECT Area_Code FROM fact;

SELECT Area_Code FROM Location_1
INTERSECT
SELECT Area_Code FROM fact;

--25. User-defined function for the product table to fetch a particular product type based upon the user’s preference.
CREATE FUNCTION GetProductByType
(
    @productType VARCHAR(50)
)
RETURNS TABLE
AS
RETURN 
(
    SELECT *
    FROM Product_1
    WHERE Product_type= @productType
);

SELECT * FROM dbo.GetProductByType('Coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
 BEGIN TRANSACTION;
SELECT * FROM Product_1 where ProductId=1;
	UPDATE Product_1
	SET Product_Type = 'Tea'
	WHERE ProductId = 1;

SELECT * FROM Product_1 WHERE ProductId=1;

ROLLBACK TRANSACTION;

SELECT * FROM Product_1 WHERE ProductId=1;

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
SELECT
    Date,
    ProductId,
    Sales
FROM
    fact
WHERE Total_Expenses Between 100 AND 200;

--28. Delete the records in the Product Table for regular type.
DELETE FROM Product_1
WHERE Type = 'Regular';

SELECT * FROM Product_1

--29. ASCII value of the fifth character from the column Product.
SELECT *, ASCII(SUBSTRING(Product, 5, 1)) AS 'ASCII Value'
FROM Product_1;




